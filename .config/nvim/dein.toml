# 総合
[[plugins]]
repo = 'Shougo/dein.vim'

# 動作

[[plugins]]
repo = 'kana/vim-submode'
hook_post_source = '''
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'
  let NERDTreeShowHidden=1
  nnoremap <Space>n :NERDTreeToggle<CR>
'''

# 見た目
[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # DevIconをつかう
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  " フォルダアイコンの表示をON
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  set ambiwidth=double
'''

[[plugins]] # Powerline系
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left':  [
      \              [ 'mode', 'paste' ],
      \              [ 'fugitive', 'filename']
      \            ],
      \   'right': [
      \              [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype'],
      \              [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]
      \            ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFilename',
      \   'filetype': 'LightLineFiletype',
      \   'fileformat': 'LightLineFileformat',
      \ },
\ }
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
function! LightLineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! LightLineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return ""
    else
        return ""
    endif
endfunction

function! LightLineFugitive()
    if exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? ''._ : ''
    endif
    return ''
endfunction

function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
'''

[[plugins]] # カラースキーマ
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme jellybeans
'''

[[plugins]] # ファイル検索
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  nmap <Space>f :CtrlP<CR>
'''

[[plugins]]
repo = 'tomtom/tcomment_vim.git'
hook_add = '''
  nmap <Space>c :TComment<CR>
  vmap <Space>c :TComment<CR>
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  nmap <Space>ig :IndentGuidesToggle<CR>
'''

# プログラミング補助
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_sign_column_always = 1
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''
[[plugins]]
repo = 'Shougo/neco-syntax'
[[plugins]]
repo = 'ujihisa/neco-look'


# Git
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_map_keys = 0
  let g:gitgutter_enabled = 0
  nnoremap <Space>gg :GitGutterToggle<CR>
  " 次の変更箇所ブロックに移動
  nmap <Space>gn <Plug>GitGutterNextHunk
  " 前の変更箇所ブロックに移動
  nmap <Space>gN <Plug>GitGutterPrevHunk
  nmap <Space>GN <Plug>GitGutterPrevHunk
'''

# Ruby
[[plugins]]
repo = 'glidenote/serverspec-snippets'
on_ft = ['ruby']

[[plugins]]
repo = 'tacahilo/itamae-snippets'
on_ft = ['ruby']

[[plugins]]
repo = 'Shougo/deoplete-rct'
on_ft = ['ruby']

[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_ft = ['ruby']


# Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin']
